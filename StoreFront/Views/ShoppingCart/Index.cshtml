@model Dictionary<int, StoreFront.Models.CartItemViewModel>
@{
    ViewBag.Title = "Shopping Cart";

    // add a couple of local variables for calculations later on in the page
    decimal? cartTotal = 0;
    int totalCountOfItems = 0;
}

<p class="text-right">
    @Html.ActionLink("Back to Shopping", "Index", "Games", null, new { @class = "btn btn-info" })
</p>

<h2 class="text-center">@ViewBag.Title</h2>

@if (Model.Count == 0)
{
    <p class="alert alert-warning">
        @ViewBag.Message
        @*@if (ViewBag.RemoveMessage != null)
            {
                @ViewBag.RemoveMessage
            }*@
    </p>
}
else
{
    <table class="table">
        <tr>
            <th>Game Cover</th>
            <th>Quantity</th>
            <th>Title</th>
            <th>Price</th>
            <th>Total</th>
            <th></th>
        </tr>
        @foreach (var item in Model)
        {
            // When calling on an itme in a Dictionary, you have to specify KEY or VALUE
            <tr>
                <td>
                    <img src="~/Content/img/t_@item.Value.Product.GameImage" alt="Game Cover" title="@item.Value.Product.G_Name" />
                </td>
                <td>
                    @* We are going to provide a space for the user to update the qty *@
                    @using (Html.BeginForm("UpdateCart", "ShoppingCart", FormMethod.Post))
                    {
                        // name attr--value
                        @Html.Hidden("bookID", item.Value.Product.GameID)
                        // name attri, value, HTML attributes(i.e. class, style, id, etc)
                        @Html.TextBox("qty", item.Value.Qty, new { @class = "form-control", @style = "max-width: 50px; display: inline;" })
                        <input type="submit" value="Update Quantity" class="btn btn-info" />
                    }

                    @{
                        // calculate the running total number of items in the cart
                        totalCountOfItems += item.Value.Qty;
                    }


                </td>
                <td>
                    @item.Value.Product.G_Name
                </td>
                <td>
                    @string.Format($"{item.Value.Product.GamePrice:c}")
                </td>
                <td>
                    @* Calculate LineTotal & update the running total variable for each row *@
                    @{
                        decimal? lineTotal = item.Value.Product.G_Price * item.Value.Qty;
                        cartTotal += lineTotal;
                    }
                    @string.Format($"{lineTotal:c}")
                </td>
                <td>
                    @* Remove from cart functionality *@
                    @Html.ActionLink("Remove from Cart", "RemoveFromCart", new { id = item.Value.Product.GameID })
                    @* We do not have to specify the controller because Index (the view we are on) is in the same controller as RemoveFromCart *@
                </td>
            </tr>
        }
    </table>
    <p class="alert alert-success text-center" style="font-size:1.25em">
        You have @totalCountOfItems item@(totalCountOfItems > 1 ? "s" : "") in your cart. Your total before taxes and shipping is @string.Format($"{cartTotal:c}")
    </p>
}